#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (constant_id = 1) const uint MAX_OBJECT_COUNT = 64;
layout (constant_id = 2) const uint MAX_INDICES = 1000;
layout (constant_id = 3) const uint MAX_ATTRIBUTES = 1000;

const uint MESH_COUNT = 21;
const uint MAX_ASTEROID = 20;
const uint MAX_SHOT = 20;

// const uint STATUS_INACTIVE = 0;
const uint STATUS_ACTIVE = 1;

struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};

struct GameObject {
    VkDrawIndexedIndirectCommand command;

    uint status;

    vec2 position;
    float angle;
    float velocity;
    
    float displayAngle;
    float displayAngleUpdate;

    mat4 matrix;
};

struct Mesh {
    uint indicesOffset;
    uint indicesCount;
    uint vertexOffset;
    uint vertexCount;
};

struct Asteroid {
    uint objectIndex;
};

struct AsteroidArray {
    uint count;
    Asteroid asteroids[MAX_ASTEROID];
};

struct Shot {
    uint objectIndex;
    float lifetime;
};

struct ShotArray {
    uint count;
    Shot shots[MAX_SHOT];
};

layout (std430, set=0, binding=0) buffer Index {
    uint values[MAX_INDICES];
} indices;

layout (std430, set=0, binding=1) buffer Attributes {
    vec4 values[MAX_ATTRIBUTES];
} attributes;

layout (std430, set=0, binding=2) buffer GameData {
    uint drawCount; 

    uint currentLevel;
    uint over;
    uint score;

    uint asteroidMeshIndex;
    uint asteroidMeshCount;

    GameObject objects[MAX_OBJECT_COUNT];
    Mesh meshes[MESH_COUNT];
    AsteroidArray asteroids;
    ShotArray shots;
} game;

layout (std430, set=0, binding=3) buffer GameState {
    double currentTime;
    double pastTime;
    uint up;
    uint down;
    uint left;
    uint right;
    uint space;
    float reloadTime;
} state;

const mat4 IDENTITY = mat4(
    vec4(1.0, 0.0, 0.0, 0.0),
    vec4(0.0, 1.0, 0.0, 0.0),
    vec4(0.0, 0.0, 1.0, 0.0),
    vec4(0.0, 0.0, 0.0, 1.0)
);

// https://www.shadertoy.com/view/4djSRW
float hash11(float p)
{
    p = fract(p * .1031);
    p *= p + 19.19;
    p *= p + p;
    return fract(p);
}

float hash11Min(float p, float minValue) {
    float rando = 0.0;
    float value = hash11(p);

    while (value < minValue) {
        rando += .01;
        value = hash11(p+rando);
    }

    return value;
}


void initPlayer() {
    const uint PINDICES[] = {0, 1, 2, 3, 0};
    const vec2 POSITIONS[] = {vec2(0.0, -0.03), vec2(0.04, 0.04), vec2(0.00, 0.02), vec2(-0.04, 0.04)};

    for (uint i=0; i<PINDICES.length(); i++) {
        indices.values[i] = PINDICES[i];
    }

    for (uint i=0; i<POSITIONS.length(); i++) {
        attributes.values[i] = vec4(POSITIONS[i], 0.0, 1.0);
    }

    // Mesh
    Mesh playerMesh = Mesh(0, PINDICES.length(), 0, POSITIONS.length());
    game.meshes[0] = playerMesh;

    // Object
    game.objects[game.drawCount] = GameObject(
        VkDrawIndexedIndirectCommand(
            playerMesh.indicesCount,
            1,
            playerMesh.indicesOffset,
            playerMesh.vertexOffset,
            0
        ),
        STATUS_ACTIVE,
        vec2(0.0, 0.0),         // pos
        0.0, 0.0,               // angle / vel
        0.0, 0.0,               // display angle / display angle vel
        IDENTITY
    );

    game.drawCount += 1;
} 

void initShotMesh() {
    const uint PINDICES[2] = {0, 1};
    const vec2 POSITIONS[2] = {vec2(0.0, 0.015), vec2(0.0, -0.015)};
    
    Mesh lastMesh = game.meshes[0];
    uint indicesOffset = lastMesh.indicesOffset + lastMesh.indicesCount;
    uint positionsOffset = lastMesh.vertexOffset + lastMesh.vertexCount;

    for (uint i=0; i<PINDICES.length(); i++) {
        indices.values[i+indicesOffset] = PINDICES[i];
    }

    for (uint i=0; i<POSITIONS.length(); i++) {
        attributes.values[i+positionsOffset] = vec4(POSITIONS[i], 0.0, 1.0);
    }

    game.meshes[1] = Mesh(indicesOffset, PINDICES.length(), positionsOffset, POSITIONS.length());
}

void initScoreMeshes() {
    const vec2 POSITIONS[] = {
        vec2(-0.015, -0.03), vec2(0.015, -0.03),
        vec2(-0.015,  0.00), vec2(0.015,  0.00),
        vec2(-0.015,  0.03), vec2(0.015,  0.03)
    };

    Mesh lastMesh = game.meshes[1];

    uint posLength = POSITIONS.length();
    uint indicesOffset = 0;
    uint positionsOffset = lastMesh.vertexOffset + lastMesh.vertexCount;
    for (uint i=0; i<POSITIONS.length(); i++) {
        attributes.values[i+positionsOffset] = vec4(POSITIONS[i], 0.0, 1.0);
    }

    // 0
    const uint pindices0[] = {0, 1, 5, 4, 0};
    indicesOffset = lastMesh.indicesOffset + lastMesh.indicesCount;
    for (uint i=0; i<pindices0.length(); i++) { indices.values[i+indicesOffset] = pindices0[i]; }
    game.meshes[2] = Mesh(indicesOffset, pindices0.length(), positionsOffset, posLength);

    // 1
    const uint pindices1[] = {1, 5};
    indicesOffset = indicesOffset + pindices0.length();
    for (uint i=0; i<pindices1.length(); i++) { indices.values[i+indicesOffset] = pindices1[i]; }
    game.meshes[3] = Mesh(indicesOffset, pindices1.length(), positionsOffset, posLength);

    // 2
    const uint pindices2[] = {0, 1, 3, 2, 4, 5};
    indicesOffset = indicesOffset + pindices1.length();
    for (uint i=0; i<pindices2.length(); i++) { indices.values[i+indicesOffset] = pindices2[i]; }
    game.meshes[4] = Mesh(indicesOffset, pindices2.length(), positionsOffset, posLength);

    // 3
    const uint pindices3[] = {0, 1, 3, 2, 3, 5, 4};
    indicesOffset = indicesOffset + pindices2.length();
    for (uint i=0; i<pindices3.length(); i++) { indices.values[i+indicesOffset] = pindices3[i]; }
    game.meshes[5] = Mesh(indicesOffset, pindices3.length(), positionsOffset, posLength);

    // 4
    const uint pindices4[] = {0, 2, 3, 1, 5};
    indicesOffset = indicesOffset + pindices3.length();
    for (uint i=0; i<pindices4.length(); i++) { indices.values[i+indicesOffset] = pindices4[i]; }
    game.meshes[6] = Mesh(indicesOffset, pindices4.length(), positionsOffset, posLength);

    // 5
    const uint pindices5[] = {1, 0, 2, 3, 5, 4};
    indicesOffset = indicesOffset + pindices4.length();
    for (uint i=0; i<pindices5.length(); i++) { indices.values[i+indicesOffset] = pindices5[i]; }
    game.meshes[7] = Mesh(indicesOffset, pindices5.length(), positionsOffset, posLength);

    // 6
    const uint pindices6[] = {1, 0, 4, 5, 3, 2};
    indicesOffset = indicesOffset + pindices5.length();
    for (uint i=0; i<pindices6.length(); i++) { indices.values[i+indicesOffset] = pindices6[i]; }
    game.meshes[8] = Mesh(indicesOffset, pindices6.length(), positionsOffset, posLength);

    // 7
    const uint pindices7[] = {0, 1, 5};
    indicesOffset = indicesOffset + pindices6.length();
    for (uint i=0; i<pindices7.length(); i++) { indices.values[i+indicesOffset] = pindices7[i]; }
    game.meshes[9] = Mesh(indicesOffset, pindices7.length(), positionsOffset, posLength);

    // 8
    const uint pindices8[] = {0, 1, 5, 4, 0, 2, 3};
    indicesOffset = indicesOffset + pindices7.length();
    for (uint i=0; i<pindices8.length(); i++) { indices.values[i+indicesOffset] = pindices8[i]; }
    game.meshes[10] = Mesh(indicesOffset, pindices8.length(), positionsOffset, posLength);

    // 9
    const uint pindices9[] = {4, 5, 1, 0, 2, 3};
    indicesOffset = indicesOffset + pindices8.length();
    for (uint i=0; i<pindices9.length(); i++) { indices.values[i+indicesOffset] = pindices9[i]; }
    game.meshes[11] = Mesh(indicesOffset, pindices9.length(), positionsOffset, posLength);
}

void initScore() {
    const uint MAX_SCORE_NUMBERS = 4;

    Mesh zeroMesh = game.meshes[2];
    vec2 pos = vec2(-0.95, -0.95);

    for (uint i = 0; i < MAX_SCORE_NUMBERS; i++) {
        game.objects[game.drawCount] = GameObject(
            VkDrawIndexedIndirectCommand(
                zeroMesh.indicesCount,
                1,
                zeroMesh.indicesOffset,
                zeroMesh.vertexOffset,
                game.drawCount
            ),
            STATUS_ACTIVE,
            pos,
            0.0, 0.0,
            0.0, 0.0,
            IDENTITY
        );
        
        pos.x += 0.05;
        game.drawCount += 1;
    }
}

void initAsteroids() {
    const uint BASE_MESH_INDEX = 12;
    const uint POINT_COUNT_PER_OBJECT = 12;
    const float PI = 3.1415926535897932384626433832795;

    uint asteroidCount = MESH_COUNT - BASE_MESH_INDEX;
    game.asteroidMeshIndex = BASE_MESH_INDEX;
    game.asteroidMeshCount = asteroidCount;

    Mesh lastMesh = game.meshes[11];
    uint indicesBaseOffset = lastMesh.indicesOffset + lastMesh.indicesCount;
    uint positionsBaseOffset = lastMesh.vertexOffset + lastMesh.vertexCount;

    float radStep = (2*PI) / float(POINT_COUNT_PER_OBJECT);
    float dist, radValue, lastDist = 0.453672;

    for (uint i = 0; i < asteroidCount; i++) {
        radValue = 0.0;

        // Generate vertex
        for (uint j = 0; j < POINT_COUNT_PER_OBJECT; j++) {
            lastDist = dist = hash11Min(float(i+j), 0.5) * 0.11;

            indices.values[indicesBaseOffset+j] = j;
            attributes.values[positionsBaseOffset+j] = vec4(dist * cos(radValue), dist * sin(radValue), 0.0, 1.0);

            radValue += radStep;
        }

        // Last vertex (close the loop with the first position)
        indices.values[indicesBaseOffset+POINT_COUNT_PER_OBJECT] = 0;

        // Save mesh info
        game.meshes[BASE_MESH_INDEX+i] = Mesh(
            indicesBaseOffset,
            POINT_COUNT_PER_OBJECT + 1,
            positionsBaseOffset,
            POINT_COUNT_PER_OBJECT
        );

        indicesBaseOffset += POINT_COUNT_PER_OBJECT + 1;
        positionsBaseOffset += POINT_COUNT_PER_OBJECT;
    }
}

void main() {
    initPlayer();
    initShotMesh();
    initScoreMeshes();
    initScore();
    initAsteroids();

    game.asteroids.count = 0;
    game.shots.count = 0;
    game.currentLevel = 0;
    game.over = 0;
    game.score = 0;

    state.pastTime = state.currentTime;
    state.reloadTime = float(state.currentTime);
}
