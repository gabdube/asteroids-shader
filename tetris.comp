#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (constant_id = 1) const uint MAX_OBJECT_COUNT = 64;
layout (constant_id = 2) const uint MAX_INDICES = 1000;
layout (constant_id = 3) const uint MAX_ATTRIBUTES = 1000;

const uint MESH_COUNT = 21;
const uint MAX_ASTEROID = 20;
const uint MAX_SHOT = 20;

struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};

struct GameObject {
    mat4 matrix;
    
    vec2 position;
    float angle;
    float velocity;
    
    float displayAngle;
    float displayAngleUpdate;

    uint deleteFlag;
};

struct Mesh {
    uint indicesOffset;
    uint indicesCount;
    uint vertexOffset;
    uint vertexCount;
};

struct Asteroid {
    uint objectIndex;
    uint life;
    float radius;
};

struct AsteroidArray {
    uint count;
    Asteroid asteroids[MAX_ASTEROID];
};

struct Shot {
    uint objectIndex;
    float lifetime;
};

struct ShotArray {
    uint count;
    Shot shots[MAX_SHOT];
};

const mat4 IDENTITY = mat4(
    vec4(1.0, 0.0, 0.0, 0.0),
    vec4(0.0, 1.0, 0.0, 0.0),
    vec4(0.0, 0.0, 1.0, 0.0),
    vec4(0.0, 0.0, 0.0, 1.0)
);

layout (std430, set=0, binding=0) buffer DrawCommands {
    VkDrawIndexedIndirectCommand commands[MAX_OBJECT_COUNT];
} draw;

layout (std430, set=0, binding=1) buffer DrawCommandCount {
    uint value;
} draw_count;

layout (std430, set=0, binding=2) buffer Index {
    uint values[MAX_INDICES];
} indices;

layout (std430, set=0, binding=3) buffer Attributes {
    vec4 values[MAX_ATTRIBUTES];
} attributes;

layout (std430, set=0, binding=4) buffer GameData {
    uint currentLevel;
    uint over;
    uint score;

    uint asteroidMeshIndex;
    uint asteroidMeshCount;

    GameObject objects[MAX_OBJECT_COUNT];
    Mesh meshes[MESH_COUNT];
    
    AsteroidArray asteroids;
    ShotArray shots;
} game;

layout (std430, set=0, binding=5) buffer GameState {
    double currentTime;
    double pastTime;
    uint up;
    uint left;
    uint right;
    uint space;
    float reloadTime;
} state;

// https://www.shadertoy.com/view/4djSRW
float hash11(float p)
{
    p = fract(p * .1031);
    p *= p + 19.19;
    p *= p + p;
    return fract(p);
}

bool pushArray(Asteroid obj) {
    uint count = game.asteroids.count;
    if (count == MAX_ASTEROID) {
        return false;
    }

    game.asteroids.asteroids[count] = obj;
    game.asteroids.count += 1;
    return true;
}

bool pushArray(Shot obj) {
    uint count = game.shots.count;
    if (count == MAX_SHOT) {
        return false;
    }

    game.shots.shots[count] = obj;
    game.shots.count += 1;
    return true;
}

uint nextFreeObject() {
    if (draw_count.value == MAX_OBJECT_COUNT) {
        return 0;
    } else {
        return draw_count.value;
    }
}

void instanceShot(vec2 pos, float angle) {
    const float SHOT_VELOCITY = 1.5;

    uint shotIndex = nextFreeObject();
    if (shotIndex == 0) {
        return; // no more space!!!
    }

    Shot shot = Shot(shotIndex, float(state.currentTime + 1.3));
    if (!pushArray(shot)) {
        return; // no more space!!!
    }

    // Spawn the shot just in front of the player
    vec2 relativePos = vec2(pos.x + (sin(angle) * -0.05), pos.y + (cos(angle) * -0.05));
    game.objects[shotIndex] = GameObject(IDENTITY, relativePos, angle, SHOT_VELOCITY, angle, 0.0, 0);

    Mesh shotMesh = game.meshes[1];
    draw.commands[shotIndex] = VkDrawIndexedIndirectCommand(shotMesh.indicesCount, 1, shotMesh.indicesOffset, shotMesh.vertexOffset, shotIndex);
    draw_count.value += 1;
}

void beginNewLevel() {
    const float PI = 3.1415926535897932384626433832795;

    if (game.asteroids.count != 0) {
        return;
    }

    float ftime = float(state.currentTime);
    float x, y, a, j;
    float vel = 0.5 + (0.1*float(game.currentLevel));
    uint index, meshIndex, nextCount = 1;
    float rando = 0.0;
    vec2 playerPos = game.objects[0].position;

    for (uint i = 0; i < nextCount; i++) {
        index = nextFreeObject();
        if (index == 0) {
            continue;
        }

        if (!pushArray(Asteroid(index, 1, 0.11))) {
            continue;
        }

        rando = hash11(rando + i + ftime);

        meshIndex = uint(hash11(rando)  * float(game.asteroidMeshCount-1));
        meshIndex = game.asteroidMeshIndex + meshIndex;
        Mesh mesh = game.meshes[meshIndex];

        j = 0.0;
        do {
            x = (hash11(rando + i + j) - 0.5) * 2;
            y = (hash11(rando + i + j + 0.19) - 0.5) * 2;
            j += 0.001;
        } while ( distance(playerPos, vec2(x, y)) < 0.15 );
        
        a = hash11(rando + i * + 97.129) * (2*PI);

        game.objects[index] = GameObject(
            IDENTITY,
            vec2(x, y),                    // pos
            a, vel,                        // angle / vel
            a, PI,                         // display angle / display angle velocity
            0
        );

        draw.commands[index] = VkDrawIndexedIndirectCommand(
            mesh.indicesCount, 1, 
            mesh.indicesOffset, mesh.vertexOffset,
            index
        );
        
        draw_count.value += 1;
    }

    game.currentLevel += 1;
}

void collisions() {
    vec2 pos1, pos2, playerPos = game.objects[0].position;
    Asteroid as;
    Shot shot;

    for (uint i=0; i < game.asteroids.count; i++) {
        as = game.asteroids.asteroids[i];
        pos1 = game.objects[as.objectIndex].position;

        // Player collision
        if (distance(playerPos, pos1) < as.radius) {
            game.over = 1;
            break;
        }
    }

    for (uint i=0; i < game.shots.count; i++) {
        shot = game.shots.shots[i];
        pos1 = game.objects[shot.objectIndex].position; 

        for (uint j=0; j < game.asteroids.count; j++) {
            as = game.asteroids.asteroids[j];
            pos2 = game.objects[as.objectIndex].position; 

            if (distance(pos1, pos2) < as.radius && i == 0) {
                game.objects[shot.objectIndex].deleteFlag = 1;
                game.objects[as.objectIndex].deleteFlag = 1;
                game.score += (1 * game.currentLevel);
            }   
        }
    }

}

void cleanObjects() {
    float currentTime = float(state.currentTime);
    uint index = 0, lastObjectIndex, currentObjectIndex;
    Shot shot;
    Asteroid ast;
    GameObject obj;

    // Asteroids
    while (index < game.asteroids.count) {
        ast = game.asteroids.asteroids[index];
        obj = game.objects[ast.objectIndex];

        if (obj.deleteFlag == 1) {
            lastObjectIndex = draw_count.value - 1;
            currentObjectIndex = ast.objectIndex;

            // Swap remove the current asteroid object
            game.asteroids.asteroids[index] = game.asteroids.asteroids[game.asteroids.count - 1];
            game.asteroids.asteroids[index].objectIndex = currentObjectIndex;

            // Swap remove the current object
            game.objects[currentObjectIndex] = game.objects[lastObjectIndex];

            // Update the draw commands to point at the good object
            draw.commands[currentObjectIndex] = draw.commands[lastObjectIndex];
            draw.commands[currentObjectIndex].firstInstance = currentObjectIndex;

            draw_count.value -= 1;
            game.asteroids.count -= 1;
        } else {
            index += 1;
        }
    }
    
    // Shots
    index = 0;
    while (index < game.shots.count) {
        shot = game.shots.shots[index];
        obj = game.objects[shot.objectIndex];

        if (shot.lifetime < currentTime || obj.deleteFlag == 1) {
            lastObjectIndex = draw_count.value - 1;
            currentObjectIndex = shot.objectIndex;

            // Swap remove the current shot object
            game.shots.shots[index] = game.shots.shots[game.shots.count - 1];
            game.shots.shots[index].objectIndex = currentObjectIndex;
            
            // Swap remove the current object
            game.objects[currentObjectIndex] = game.objects[lastObjectIndex];

            // Update the draw commands to point at the good object
            draw.commands[currentObjectIndex] = draw.commands[lastObjectIndex];
            draw.commands[currentObjectIndex].firstInstance = currentObjectIndex;

            draw_count.value -= 1;
            game.shots.count -= 1;
        } else {
            index += 1;
        }
    }

}

void updatePlayer(double delta) {
    GameObject player = game.objects[0];
    float angle = player.angle;
    float timeStep = float(delta / 2.0);
    vec2 pos = player.position;

    if (state.left == 1) {
        angle += timeStep * radians(360);
    } else if (state.right == 1) {
        angle -= timeStep * radians(360);
    }

    if (state.up == 1) {
        pos.x -= timeStep * sin(angle);
        pos.y -= timeStep * cos(angle);
    }

    if (state.space == 1 && state.reloadTime < state.currentTime) {
        instanceShot(pos, angle);
        state.reloadTime = float(state.currentTime + 0.20);
    }

    player.angle = angle;
    player.displayAngle = angle;
    player.position = pos;
    game.objects[0] = player;
}

void updateObjects(double delta) {
    float timeStep = float(delta / 2.0);

    uint index = 0, objectsCount = draw_count.value;
    float vel, angle, dAngle, dVel, dVelStep;
    vec2 pos, rot1, rot2;
    GameObject obj;
    Shot shot;

    while (index < objectsCount) {
        obj = game.objects[index];
        vel = obj.velocity;
        angle = obj.angle;

        dAngle = obj.displayAngle;
        dVel = obj.displayAngleUpdate;

        // Velocity
        pos = obj.position;
        pos.x -= (timeStep * sin(angle)) * vel;
        pos.y -= (timeStep * cos(angle)) * vel;

        // Angular velocity
        dAngle += timeStep * dVel;
        rot1 = vec2( cos(dAngle), -sin(dAngle) );
        rot2 = vec2( sin(dAngle),  cos(dAngle) );

        // Edge teleport
        if (pos.x > 1.1) { pos.x = -1.05;}
        else if (pos.x < -1.1) { pos.x = 1.05; }

        if (pos.y > 1.1) { pos.y = -1.05; } 
        else if (pos.y < -1.1) { pos.y = 1.05; }

        // Saving
        game.objects[index].matrix[0].xy = rot1;
        game.objects[index].matrix[1].xy = rot2;
        game.objects[index].matrix[3].xy = pos;
        game.objects[index].position = pos;
        game.objects[index].displayAngle = dAngle;

        index += 1;
    }
}

void gameOver() {
    if (game.over == 0) {
        return;
    }

    uint objIndex;

    // Flag all asteroids and shots for removal
    for (uint i = 0; i < game.asteroids.count; i++) {
        objIndex = game.asteroids.asteroids[i].objectIndex;
        game.objects[objIndex].deleteFlag = 1;
    }

    for (uint i = 0; i < game.shots.count; i++) {
        objIndex = game.shots.shots[i].objectIndex;
        game.objects[objIndex].deleteFlag = 1;
    }

    // Reset the player
    game.objects[0] = GameObject(
        IDENTITY,
        vec2(0.0, 0.0),
        0.0, 0.0,
        0.0, 0.0,
        0
    );

    game.currentLevel = 0;
    game.score = 0;
    game.over = 0;
}

uint updateScoreNumber(uint n, uint scoreIndex) {
    const uint BASE_NUMBER_MESH_INDEX = 2;
    const uint BASE_SCORE_OBJ_INDEX = 1;
    uint scoreObjIndex = BASE_SCORE_OBJ_INDEX+scoreIndex;

    Mesh newMesh = game.meshes[BASE_NUMBER_MESH_INDEX + n];
    draw.commands[scoreObjIndex] = VkDrawIndexedIndirectCommand(
        newMesh.indicesCount, 1,
        newMesh.indicesOffset, newMesh.vertexOffset,
        scoreObjIndex
    );

    return n;
}

void updateScore() {
    uint score = game.score;
    if (score > 9999) {
        score = 9999;
    }

    if (score >= 1000) {
        score -= updateScoreNumber((score / 1000), 0) * 1000;
    }

    if (score >= 100) {
        score -= updateScoreNumber((score / 100), 1) * 100;
    } else {
        updateScoreNumber(0, 1);
    }

    if (score >= 10) {
        score -= updateScoreNumber((score / 10), 2) * 10;
    } else {
        updateScoreNumber(0, 2);
    }
    
    updateScoreNumber(score, 3);
}

void main() {
    double delta = state.currentTime - state.pastTime;

    beginNewLevel();

    updatePlayer(delta);

    collisions();
    cleanObjects();

    updateObjects(delta);

    gameOver();
    
    updateScore();
    
    state.pastTime = state.currentTime;
}
